{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from 'axios';\nvar BASE_URL = 'https://localhost:7217/api/User/';\nvar UserService = function () {\n  function UserService() {\n    _classCallCheck(this, UserService);\n  }\n  _createClass(UserService, [{\n    key: \"addUser\",\n    value: function () {\n      var _addUser = _asyncToGenerator(function* (user) {\n        try {\n          var formData = new FormData();\n          formData.append('username', user.username);\n          formData.append('password', user.password);\n          var responsePhoto = yield fetch(user.photo);\n          var blob = yield responsePhoto.blob();\n          formData.append('photo', blob, 'photo.jpg');\n          var uploadResponse = yield axios.post(BASE_URL + 'addUser', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          return uploadResponse.status === 201;\n        } catch (error) {\n          console.error('Erro ao adicionar usuário:', error);\n          return false;\n        }\n      });\n      function addUser(_x) {\n        return _addUser.apply(this, arguments);\n      }\n      return addUser;\n    }()\n  }, {\n    key: \"validateUser\",\n    value: function () {\n      var _validateUser = _asyncToGenerator(function* (username, password) {\n        try {\n          var response = yield axios.get(`${BASE_URL}?username=${username}&password=${password}`);\n          if (response.data.length === 0) {\n            return false;\n          }\n          return response.status === 200;\n        } catch (error) {\n          console.error('Erro ao validar usuário:', error);\n          return false;\n        }\n      });\n      function validateUser(_x2, _x3) {\n        return _validateUser.apply(this, arguments);\n      }\n      return validateUser;\n    }()\n  }]);\n  return UserService;\n}();\nexport default UserService;","map":{"version":3,"names":["axios","BASE_URL","UserService","_classCallCheck","_createClass","key","value","_addUser","_asyncToGenerator","user","formData","FormData","append","username","password","responsePhoto","fetch","photo","blob","uploadResponse","post","headers","status","error","console","addUser","_x","apply","arguments","_validateUser","response","get","data","length","validateUser","_x2","_x3"],"sources":["C:/Users/loray/OneDrive/Documents/Teste/my-app/src/services/userService.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { User } from './types';\r\nconst BASE_URL = 'https://localhost:7217/api/User/'//'http://localhost:3000/User/';\r\n\r\nclass UserService {\r\n\r\n    constructor() {\r\n        // Se necessário, adicione inicializações aqui\r\n      }\r\n\r\n  async addUser(user: User): Promise<boolean> {\r\n    try {\r\n    //  const response = await axios.post(`${BASE_URL}`, user);\r\n    \r\n    const formData = new FormData();\r\n    formData.append('username', user.username);\r\n    formData.append('password', user.password);\r\n\r\n    const responsePhoto = await fetch(user.photo);\r\n\r\n    const blob = await responsePhoto.blob();\r\n\r\n    formData.append('photo', blob, 'photo.jpg');\r\n\r\n    const uploadResponse = await axios.post(BASE_URL+'addUser', formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n    });\r\n    \r\n      return uploadResponse.status === 201; // Retorna true se o usuário foi adicionado com sucesso\r\n    \r\n    } catch (error) {\r\n      console.error('Erro ao adicionar usuário:', error);\r\n      return false; // Retorna false em caso de erro\r\n    }\r\n  }\r\n\r\n  async validateUser(username: string, password: string): Promise<boolean> {\r\n    try {\r\n        const response: AxiosResponse<User[]> = await axios.get(`${BASE_URL}?username=${username}&password=${password}`);\r\n        //na aplicação de vocês não retorna array não e o metodo sera um post que retorna um unico usuario.\r\n        if (response.data.length === 0) {\r\n          return false;\r\n        }\r\n  \r\n        return response.status === 200; \r\n    } catch (error) {\r\n      console.error('Erro ao validar usuário:', error);\r\n      return false; // Retorna false em caso de erro\r\n    }\r\n  }\r\n}\r\n\r\nexport default  UserService;"],"mappings":";;;AAAA,OAAOA,KAAK,MAAyB,OAAO;AAE5C,IAAMC,QAAQ,GAAG,kCAAkC;AAAA,IAE7CC,WAAW;EAEb,SAAAA,YAAA,EAAc;IAAAC,eAAA,OAAAD,WAAA;EAEZ;EAACE,YAAA,CAAAF,WAAA;IAAAG,GAAA;IAAAC,KAAA;MAAA,IAAAC,QAAA,GAAAC,iBAAA,CAEL,WAAcC,IAAU,EAAoB;QAC1C,IAAI;UAGJ,IAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;UAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,IAAI,CAACI,QAAQ,CAAC;UAC1CH,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,IAAI,CAACK,QAAQ,CAAC;UAE1C,IAAMC,aAAa,SAASC,KAAK,CAACP,IAAI,CAACQ,KAAK,CAAC;UAE7C,IAAMC,IAAI,SAASH,aAAa,CAACG,IAAI,CAAC,CAAC;UAEvCR,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEM,IAAI,EAAE,WAAW,CAAC;UAE3C,IAAMC,cAAc,SAASnB,KAAK,CAACoB,IAAI,CAACnB,QAAQ,GAAC,SAAS,EAAES,QAAQ,EAAE;YAClEW,OAAO,EAAE;cACL,cAAc,EAAE;YACpB;UACJ,CAAC,CAAC;UAEA,OAAOF,cAAc,CAACG,MAAM,KAAK,GAAG;QAEtC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClD,OAAO,KAAK;QACd;MACF,CAAC;MAAA,SAAAE,QAAAC,EAAA;QAAA,OAAAnB,QAAA,CAAAoB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,OAAA;IAAA;EAAA;IAAApB,GAAA;IAAAC,KAAA;MAAA,IAAAuB,aAAA,GAAArB,iBAAA,CAED,WAAmBK,QAAgB,EAAEC,QAAgB,EAAoB;QACvE,IAAI;UACA,IAAMgB,QAA+B,SAAS9B,KAAK,CAAC+B,GAAG,CAAE,GAAE9B,QAAS,aAAYY,QAAS,aAAYC,QAAS,EAAC,CAAC;UAEhH,IAAIgB,QAAQ,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO,KAAK;UACd;UAEA,OAAOH,QAAQ,CAACR,MAAM,KAAK,GAAG;QAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChD,OAAO,KAAK;QACd;MACF,CAAC;MAAA,SAAAW,aAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAP,aAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAM,YAAA;IAAA;EAAA;EAAA,OAAAhC,WAAA;AAAA;AAGH,eAAgBA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}