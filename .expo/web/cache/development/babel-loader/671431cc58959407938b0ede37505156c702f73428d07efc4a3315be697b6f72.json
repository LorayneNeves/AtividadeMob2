{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\loray\\\\OneDrive\\\\Documents\\\\Teste\\\\my-app\\\\src\\\\screens\\\\index.tsx\",\n  _this = this;\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport * as ImagePicker from 'expo-image-picker';\nimport UserService from '../services/userService';\nimport CustomButton from '../components/button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Home = function Home() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    image = _useState2[0],\n    setImage = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    name = _useState4[0],\n    setName = _useState4[1];\n  var pickImage = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 1\n      });\n      console.log(result);\n      if (!result.canceled) {\n        setImage(result.assets[0].uri);\n      }\n    });\n    return function pickImage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var userService = new UserService();\n  var handleUpload = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var user = {\n          username: name,\n          password: 'password',\n          photo: image\n        };\n        var userAdded = yield userService.addUser(user);\n        if (userAdded) {\n          console.log('Usuário adicionado com sucesso!');\n        } else {\n          console.log('Erro ao adicionar usuário');\n        }\n      } catch (error) {\n        console.error('Error uploading image:', error);\n      }\n    });\n    return function handleUpload() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var navigation = useNavigation();\n  return _jsxDEV(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: [_jsxDEV(Text, {\n      children: \"Nome:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 3\n    }, _this), _jsxDEV(TextInput, {\n      style: {\n        height: 40,\n        borderColor: 'gray',\n        borderWidth: 1,\n        marginBottom: 10\n      },\n      onChangeText: function onChangeText(text) {\n        return setName(text);\n      },\n      value: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }, _this), _jsxDEV(CustomButton, {\n      title: \"Selecionar Imagem\",\n      onPress: pickImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }, _this), image && _jsxDEV(Image, {\n      source: {\n        uri: image\n      },\n      style: {\n        width: 200,\n        height: 200,\n        marginBottom: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, _this), _jsxDEV(CustomButton, {\n      title: \"Upload\",\n      onPress: handleUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 3\n  }, _this);\n};\nexport default Home;","map":{"version":3,"names":["useNavigation","React","useState","Image","View","Text","TextInput","ImagePicker","UserService","CustomButton","jsxDEV","_jsxDEV","Home","_useState","_useState2","_slicedToArray","image","setImage","_useState3","_useState4","name","setName","pickImage","_ref","_asyncToGenerator","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","console","log","canceled","assets","uri","apply","arguments","userService","handleUpload","_ref2","user","username","password","photo","userAdded","addUser","error","navigation","style","flex","alignItems","justifyContent","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","height","borderColor","borderWidth","marginBottom","onChangeText","text","value","title","onPress","source","width"],"sources":["C:/Users/loray/OneDrive/Documents/Teste/my-app/src/screens/index.tsx"],"sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport React, { useState } from 'react';\r\nimport { Button, Image, View, Platform, Text, TextInput } from 'react-native';\r\nimport { StackTypes } from '../routes/stack';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport UserService   from '../services/userService';\r\nimport {User} from '../types/types'\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport CustomButton from '../components/button';\r\n\r\nconst Home = () => {\r\n    const [image, setImage] = useState('');\r\n    const [name, setName] = useState('');\r\n\r\n    const pickImage = async () => {\r\n      // No permissions request is necessary for launching the image library\r\n      let result = await ImagePicker.launchImageLibraryAsync({\r\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n        allowsEditing: true,\r\n        aspect: [4, 3],\r\n        quality: 1,\r\n      });\r\n  \r\n      console.log(result);\r\n  \r\n      if (!result.canceled) {\r\n        setImage(result.assets[0].uri);\r\n      }\r\n    };\r\n\r\n    const userService = new UserService();\r\n\r\n    const handleUpload = async () => {\r\n      try {\r\n        const user: User = {\r\n            username: name,\r\n            password: 'password', // Defina a senha como necessário\r\n            photo: image\r\n        };\r\n\r\n          const userAdded = await userService.addUser(user);\r\n          if (userAdded) {\r\n              console.log('Usuário adicionado com sucesso!');\r\n          } else {\r\n              console.log('Erro ao adicionar usuário');\r\n          }\r\n      } catch (error) {\r\n          console.error('Error uploading image:', error);\r\n      }\r\n  };\r\n\r\n    const navigation = useNavigation<StackTypes>();\r\n\r\nreturn (\r\n  \r\n       \r\n  <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  <Text>Nome:</Text>\r\n  <TextInput\r\n      style={{ height: 40, borderColor: 'gray', borderWidth: 1, marginBottom: 10 }}\r\n      onChangeText={text => setName(text)}\r\n      value={name}\r\n  />\r\n  <CustomButton title='Selecionar Imagem' onPress={pickImage}></CustomButton>\r\n  \r\n  {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 , marginBottom: 10}} />}\r\n  \r\n  <CustomButton title='Upload' onPress={handleUpload}></CustomButton>\r\n</View>\r\n        \r\n   \r\n\r\n);\r\n\r\n};\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}