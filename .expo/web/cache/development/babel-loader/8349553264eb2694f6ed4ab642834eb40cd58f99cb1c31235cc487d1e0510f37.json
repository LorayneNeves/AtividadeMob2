{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar NoWorkResult = require('./no-work-result');\nvar LazyResult = require('./lazy-result');\nvar Document = require('./document');\nvar Root = require('./root');\nvar Processor = function () {\n  function Processor() {\n    var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, Processor);\n    this.version = '8.4.31';\n    this.plugins = this.normalize(plugins);\n  }\n  _createClass(Processor, [{\n    key: \"normalize\",\n    value: function normalize(plugins) {\n      var normalized = [];\n      for (var i of plugins) {\n        if (i.postcss === true) {\n          i = i();\n        } else if (i.postcss) {\n          i = i.postcss;\n        }\n        if (typeof i === 'object' && Array.isArray(i.plugins)) {\n          normalized = normalized.concat(i.plugins);\n        } else if (typeof i === 'object' && i.postcssPlugin) {\n          normalized.push(i);\n        } else if (typeof i === 'function') {\n          normalized.push(i);\n        } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' + 'one of the syntax/parser/stringifier options as outlined ' + 'in your PostCSS runner documentation.');\n          }\n        } else {\n          throw new Error(i + ' is not a PostCSS plugin');\n        }\n      }\n      return normalized;\n    }\n  }, {\n    key: \"process\",\n    value: function process(css) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this.plugins.length === 0 && typeof opts.parser === 'undefined' && typeof opts.stringifier === 'undefined' && typeof opts.syntax === 'undefined') {\n        return new NoWorkResult(this, css, opts);\n      } else {\n        return new LazyResult(this, css, opts);\n      }\n    }\n  }, {\n    key: \"use\",\n    value: function use(plugin) {\n      this.plugins = this.plugins.concat(this.normalize([plugin]));\n      return this;\n    }\n  }]);\n  return Processor;\n}();\nmodule.exports = Processor;\nProcessor.default = Processor;\nRoot.registerProcessor(Processor);\nDocument.registerProcessor(Processor);","map":{"version":3,"names":["_classCallCheck","require","_createClass","NoWorkResult","LazyResult","Document","Root","Processor","plugins","arguments","length","undefined","version","normalize","key","value","normalized","i","postcss","Array","isArray","concat","postcssPlugin","push","parse","stringify","process","env","NODE_ENV","Error","css","opts","parser","stringifier","syntax","use","plugin","module","exports","default","registerProcessor"],"sources":["C:/Users/loray/OneDrive/Documents/Teste/my-app/node_modules/styled-components/node_modules/postcss/lib/processor.js"],"sourcesContent":["'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.31'\n    this.plugins = this.normalize(plugins)\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}